package com.rograndec.feijiayun.chain.app;import java.net.InetAddress;import java.util.List;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.cloud.context.config.annotation.RefreshScope;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;import org.springframework.cloud.netflix.feign.EnableFeignClients;import org.springframework.context.annotation.ComponentScan;import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;import org.springframework.transaction.annotation.EnableTransactionManagement;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.method.support.HandlerMethodArgumentResolver;import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;import com.rograndec.feijiayun.chain.common.resolver.LoginUserArgumentResolver;import com.rograndec.feijiayun.chain.config.YmlConfiguration;/** *  * 启动入口 * @author zhongyi.li * */@RestController@SpringBootApplication@EnableEurekaClient@EnableFeignClients("com.rograndec.feijiayun.chain")@EnableConfigurationProperties({YmlConfiguration.class})@EnableTransactionManagement@RefreshScope@ComponentScan("com.rograndec.feijiayun.chain")@MapperScan("com.rograndec.feijiayun.chain.**.dao")@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 86400*30,redisNamespace = "SAAS_USER")public class ChainBackendApplication extends WebMvcConfigurerAdapter {		@RequestMapping("/getHostName")    @ResponseBody    String getHostName() {		String hostName = "";		try {			InetAddress address = InetAddress.getLocalHost();			hostName = address.getHostName()+"/"+address.getHostAddress();		} catch (Exception e) {			e.printStackTrace();		}        return "HOSTNAME:"+hostName;    }	public static void main(String[] args) {		SpringApplication.run(ChainBackendApplication.class, args);	}	/*@Bean	public RedisOperationsSessionRepository sessionRepository(RedisConnectionFactory factory) {		RedisOperationsSessionRepository sessionRepository = new RedisOperationsSessionRepository(factory);		sessionRepository.setDefaultMaxInactiveInterval(86400*30);		return sessionRepository;	}*/	@Override	public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {		super.addArgumentResolvers(argumentResolvers);		argumentResolvers.add(new LoginUserArgumentResolver());	}}