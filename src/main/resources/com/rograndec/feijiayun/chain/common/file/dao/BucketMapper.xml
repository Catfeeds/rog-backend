<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rograndec.feijiayun.chain.common.file.dao.BucketMapper">
  <resultMap id="BaseResultMap" type="com.rograndec.feijiayun.chain.common.file.entity.Bucket">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="bucket_type" jdbcType="INTEGER" property="bucketType" />
    <result column="scheme" jdbcType="INTEGER" property="scheme" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="domain" jdbcType="VARCHAR" property="domain" />
    <result column="description" jdbcType="VARCHAR" property="description" />
  </resultMap>
  <sql id="Base_Column_List">
    id, bucket_type, scheme, name, domain, description
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from saas_bucket
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from saas_bucket
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.rograndec.feijiayun.chain.common.file.entity.Bucket">
    insert into saas_bucket (id, bucket_type, scheme, 
      name, domain, description
      )
    values (#{id,jdbcType=INTEGER}, #{bucketType,jdbcType=INTEGER}, #{scheme,jdbcType=INTEGER}, 
      #{name,jdbcType=VARCHAR}, #{domain,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.rograndec.feijiayun.chain.common.file.entity.Bucket">
    insert into saas_bucket
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="bucketType != null">
        bucket_type,
      </if>
      <if test="scheme != null">
        scheme,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="domain != null">
        domain,
      </if>
      <if test="description != null">
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="bucketType != null">
        #{bucketType,jdbcType=INTEGER},
      </if>
      <if test="scheme != null">
        #{scheme,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="domain != null">
        #{domain,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.rograndec.feijiayun.chain.common.file.entity.Bucket">
    update saas_bucket
    <set>
      <if test="bucketType != null">
        bucket_type = #{bucketType,jdbcType=INTEGER},
      </if>
      <if test="scheme != null">
        scheme = #{scheme,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="domain != null">
        domain = #{domain,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.rograndec.feijiayun.chain.common.file.entity.Bucket">
    update saas_bucket
    set bucket_type = #{bucketType,jdbcType=INTEGER},
      scheme = #{scheme,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      domain = #{domain,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="findBucketByIds" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from saas_bucket
    where id in 
	<foreach item="item" index="index" collection="list"
             open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>
</mapper>